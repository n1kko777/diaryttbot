require("dotenv").config();
const { Markup } = require("telegraf");

const pauseTime = process.env.MISTRAL_API_PAUSE;

function getMinuteEnding(minutes) {
  if (minutes === 0) return "–º–∏–Ω—É—Ç"; // –ù–∞–ø—Ä–∏–º–µ—Ä, "0 –º–∏–Ω—É—Ç"
  const lastDigit = minutes % 10;
  if (lastDigit === 1 && minutes !== 11) {
    return "–º–∏–Ω—É—Ç–∞"; // –ù–∞–ø—Ä–∏–º–µ—Ä, "1 –º–∏–Ω—É—Ç–∞"
  }
  if (lastDigit >= 2 && lastDigit <= 4 && !(minutes >= 12 && minutes <= 14)) {
    return "–º–∏–Ω—É—Ç—ã"; // –ù–∞–ø—Ä–∏–º–µ—Ä, "2 –º–∏–Ω—É—Ç—ã", "3 –º–∏–Ω—É—Ç—ã", "4 –º–∏–Ω—É—Ç—ã"
  }
  return "–º–∏–Ω—É—Ç"; // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏, –≤–∫–ª—é—á–∞—è "5 –º–∏–Ω—É—Ç", "15 –º–∏–Ω—É—Ç" –∏ —Ç.–¥.
}

function getRemainingTime(dateToCheck) {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
  const prevDate = new Date(dateToCheck);
  const currentDate = new Date();

  // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  const timeDifferenceInMs = Math.abs(
    currentDate.getTime() - prevDate.getTime()
  );

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã
  const minutesDifference = Math.floor(timeDifferenceInMs / (1000 * 60));

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è (–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ pauseTime –º–∏–Ω—É—Ç)
  if (minutesDifference <= pauseTime) {
    return pauseTime - minutesDifference;
  }

  // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ pauseTime –º–∏–Ω—É—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
  return 0;
}

const analyzeGames = async (
  ctx,
  prisma,
  client,
  model = "mistral-small-latest"
) => {
  const telegramId = ctx.from.id.toString();
  const user = await prisma.user.findUnique({ where: { telegramId } });

  if (!user) {
    return ctx.reply("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è /start.");
  }
  const reqAiTime = ctx.session.reqAiTime;
  const remainingMinutes = getRemainingTime(reqAiTime);

  if (reqAiTime && remainingMinutes > 0) {
    return ctx.reply(
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ${remainingMinutes} ${getMinuteEnding(
        remainingMinutes
      )}`
    );
  }

  const filter = ctx.session.filter || {};
  const buttons = [];

  if (ctx.session.filter && Object.keys(ctx.session.filter).length > 0) {
    buttons.push([
      Markup.button.callback("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", "reset_filter"),
    ]);
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –º–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const diaries = await prisma.diary.findMany({
    where: { userId: user.id, ...filter },
    include: { games: true },
    orderBy: { createdAt: "desc" },
    take: 10,
  });

  if (diaries.length === 0) {
    return ctx.reply(
      "–í–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º.",
      Markup.inlineKeyboard(buttons)
    );
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const analysisData = diaries.map((diary) => ({
    date: diary.createdAt,
    opponent: diary.opponentName,
    style: diary.opponentStyle,
    rating: diary.opponentRating,
    tacticalPlan: diary.tacticalPlan,
    games: diary.games.map((game) => game.score),
    comments: diary.comments,
  }));

  const { message_id } = await ctx.reply("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...");

  try {
    const chatResponse = await client.chat.complete({
      model,
      messages: [
        {
          role: "user",
          content: `–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–º—É —Ç–µ–Ω–Ω–∏—Å—É —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ç–µ—Ö–Ω–∏–∫–∏, —Ç–∞–∫—Ç–∏–∫–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏–≥—Ä—ã. –¢–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–∏–ª—è –∏–≥—Ä–æ–∫–∞: ${JSON.stringify(
            analysisData
          )}. –ü—Ä–µ–∂–¥–µ —á–µ–º –¥–∞—Ç—å –æ—Ç–≤–µ—Ç, –≥–ª—É–±–æ–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –£—á—Ç–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏–≥—Ä–æ–∫–∞, –≤—ã–¥–µ–ª–∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –µ–≥–æ –∏–≥—Ä–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. –¢–∞–∫–∂–µ –ø–æ–¥—É–º–∞–π, –∫–∞–∫ –º–æ–∂–Ω–æ —É—Å–∏–ª–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –º–∞—Ç—á–∞—Ö. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.`,
        },
      ],
    });

    const escapedText = chatResponse.choices[0].message.content;

    ctx.deleteMessage(message_id);
    ctx.replyWithSafeMarkdownV2(
      `üèì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–≥—Ä:\n\n${escapedText}`,
      Markup.inlineKeyboard(buttons)
    );
    ctx.session.reqAiTime = new Date();
  } catch (error) {
    ctx.deleteMessage(message_id);
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö:", error);
    ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
      Markup.inlineKeyboard(buttons)
    );
  }
};

module.exports = { analyzeGames };
