const { Markup } = require("telegraf");

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –§–ò–û
const setFilter = (ctx, prisma, bot) => {
  const fullName = ctx.message.text.split(" ").slice(1).join(" ");
  ctx.session.filter = { opponentName: { contains: fullName } };
  ctx.reply(`–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${fullName}`);
  viewDiary(ctx, prisma, bot);
};

// –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞
const resetFilter = (ctx) => {
  ctx.session.filter = {};
  ctx.reply("–§–∏–ª—å—Ç—Ä —Å–±—Ä–æ—à–µ–Ω.");
};

const viewDiary = async (ctx, prisma, bot) => {
  const telegramId = ctx.from.id.toString();
  const user = await prisma.user.findUnique({ where: { telegramId } });

  if (!user) {
    return ctx.reply("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è /start.");
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞)
  const filter = ctx.session.filter || {};
  const diaries = await prisma.diary.findMany({
    where: {
      userId: user.id,
      ...filter,
    },
    include: { games: true },
    orderBy: { createdAt: "desc" },
  });

  if (diaries.length === 0) {
    const buttons = [];

    if (ctx.session.filter && Object.keys(ctx.session.filter).length > 0) {
      buttons.push([
        Markup.button.callback("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", "reset_filter"),
      ]);
    }

    return ctx.reply(
      "–í–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –ø—É—Å—Ç –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
      Markup.inlineKeyboard(buttons)
    );
  }

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  let currentIndex = ctx.session.currentIndex || 0;
  const pageSize = 1;

  const displayMatches = async () => {
    const currentPage = diaries.slice(currentIndex, currentIndex + pageSize);

    if (currentPage.length === 0) {
      return ctx.reply("–ë–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.", [
        [
          Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "prev_page"),
          Markup.button.callback("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", "next_page"),
        ],
      ]);
    }

    const [diary] = currentPage;
    const games = diary.games.map((game) => game.score).join(", ");

    const message =
      `üìÖ –î–∞—Ç–∞: ${new Date(diary.createdAt).toLocaleDateString()}\n` +
      `üë§ –°–æ–ø–µ—Ä–Ω–∏–∫: ${diary.opponentName}\n` +
      `üèÖ –†–µ–π—Ç–∏–Ω–≥: ${diary.opponentRating}\n` +
      `üéØ –°—Ç–∏–ª—å: ${diary.opponentStyle}\n` +
      `üìù –ü–ª–∞–Ω: ${diary.tacticalPlan}\n` +
      `üéÆ –ò–≥—Ä—ã: ${games}\n` +
      `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${diary.comments || "–ù–µ—Ç"}`;

    const buttons = [];

    if (!(currentIndex === 0 && currentIndex + pageSize === diaries.length)) {
      buttons.push([
        Markup.button.callback(
          currentIndex === 0 ? "üö´" : "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
          "prev_page"
        ),
        Markup.button.callback(
          currentIndex + pageSize === diaries.length ? "üö´" : "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
          "next_page"
        ),
      ]);
    }

    buttons.push([
      Markup.button.callback("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", `edit_${diary.id}`),
      Markup.button.callback("–£–¥–∞–ª–∏—Ç—å", `delete_${diary.id}`),
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–µ–Ω
    if (ctx.session.filter && Object.keys(ctx.session.filter).length > 0) {
      buttons.push([
        Markup.button.callback("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", "reset_filter"),
      ]);
    }

    await ctx.reply(message, Markup.inlineKeyboard(buttons));
  };

  displayMatches();

  bot.action("prev_page", async (actionCtx) => {
    if (currentIndex > 0) {
      await actionCtx.deleteMessage();
      currentIndex -= pageSize;
      ctx.session.currentIndex = currentIndex;
      await actionCtx.answerCbQuery();
      await displayMatches();
    } else {
      await actionCtx.answerCbQuery();
    }
  });

  bot.action("next_page", async (actionCtx) => {
    if (currentIndex + pageSize < diaries.length) {
      await actionCtx.deleteMessage();
      currentIndex += pageSize;
      ctx.session.currentIndex = currentIndex;
      await actionCtx.answerCbQuery();
      await displayMatches();
    } else {
      await actionCtx.answerCbQuery();
    }
  });

  bot.action("reset_filter", async (actionCtx) => {
    await actionCtx.answerCbQuery();
    resetFilter(actionCtx);
  });

  bot.action(/edit_(\d+)/, async (ctx) => {
    const diaryId = parseInt(ctx.match[1]);
    ctx.reply(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞ ID: ${diaryId} –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.`);
    await ctx.answerCbQuery();
  });

  bot.action(/delete_(\d+)/, async (ctx) => {
    try {
      const diaryId = parseInt(ctx.match[1]);

      await prisma.game.deleteMany({
        where: { diaryId },
      });

      await prisma.diary.delete({
        where: { id: diaryId },
      });

      ctx.reply("–ú–∞—Ç—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!");
      await ctx.answerCbQuery();

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      diaries.splice(currentIndex, 1);
      if (diaries.length > 0) {
        currentIndex = Math.min(currentIndex, diaries.length - 1);
        await displayMatch(ctx, currentIndex);
      } else {
        ctx.reply("–í–∞—à –¥–Ω–µ–≤–Ω–∏–∫ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç.");
      }
    } catch (error) {
      ctx.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ");
    }
  });
};

module.exports = {
  viewDiary,
  setFilter,
  resetFilter,
};
